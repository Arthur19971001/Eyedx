{"ast":null,"code":"var _jsxFileName = \"/Users/kimseongjae/source/eyeDX/src/components/parts/table/table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CustomLabel, CustomBoxLabel } from '../label/label';\nimport { connect } from 'react-redux';\nimport { ReactComponent as NoData } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../images/no_data.svg\";\nimport { BlueLoader } from '../../../components/loader/loader';\nimport \"./table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ListLangModel = {\n  basal_disease: \"BASAL DISEASE\",\n  birthday: \"BIRTH DATE\",\n  gender: \"GENDER\",\n  inspection_place: \"INSPECTION PLACE\",\n  order: \"ORDER\",\n  program: \"PROGRAM\",\n  status: \"STATUS\",\n  waiting: \"WAITING\"\n};\nconst DataTableModel = [{\n  _id: \"\",\n  interpretationDate: \"\",\n  program: [\"\"],\n  birthday: \"\",\n  gender: \"\",\n  basalDisease: [\"\"],\n  place: \"\",\n  status: \"\"\n}];\n\nconst DataTable = props => {\n  _s();\n\n  const [initListLang, setInitListLang] = useState(ListLangModel);\n  const [initBodyList, setInitBodyList] = useState(DataTableModel);\n  const [isListNull, setIsListNull] = useState(false);\n  const stirngToObj = JSON.parse(localStorage.getItem(\"filter-value\"));\n  const year = localStorage.getItem(\"filter-value\") !== null ? stirngToObj.lang === \"kr\" ? \"년\" : \"year\" : localStorage.getItem(\"lang\") === \"kr\" ? \"년\" : \"year\";\n  const updateListLang = props.list;\n  const updateBodyList = props.tableBodyList;\n  const size = props.size;\n  useEffect(() => {\n    if (updateListLang !== undefined && Object.keys(updateListLang).length !== 0) {\n      setInitListLang(updateListLang);\n    }\n\n    if (updateBodyList === null) {\n      setIsListNull(true);\n    } else {\n      if (updateBodyList !== undefined && updateBodyList.length !== 0) {\n        setInitBodyList(updateBodyList);\n        setIsListNull(false);\n      }\n    }\n  }, [updateListLang, updateBodyList]);\n\n  const tableHeader = /*#__PURE__*/_jsxDEV(\"thead\", {\n    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.order\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.program\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.birthday\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.basal_disease\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.inspection_place\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: initListLang.status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n\n  const tableBody = /*#__PURE__*/_jsxDEV(\"tbody\", {\n    className: \"tbody_value\",\n    children: initBodyList.map((list, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      className: \"table_body_list_tr\",\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: list.interpretationDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_program_td_div_\" + size,\n          children: list.program.map((title, j) => /*#__PURE__*/_jsxDEV(CustomLabel, {\n            title: title,\n            size: size\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: list.birthday\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: list.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: list.basalDisease.length === 0 ? \"-\" : list.basalDisease.map((title, k) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [title + year, list.basalDisease.length - 1 === k ? \"\" : \" / \"]\n        }, k, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: list.place\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table_status_td_div\",\n          children: /*#__PURE__*/_jsxDEV(CustomBoxLabel, {\n            title: list.status.toUpperCase(),\n            backgroundColor: list.status.toUpperCase() === \"HOLD\" ? \"#FFE4E4\" : \"#E4F3FF\",\n            color: list.status.toUpperCase() === \"HOLD\" ? \"#E50000\" : \"#0069BB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, list._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n\n  const dataLoading = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading_blue_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading_content_blue_div\",\n        children: [/*#__PURE__*/_jsxDEV(BlueLoader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n\n  const tableInfo = true ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table_wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no_data_div\",\n      children: /*#__PURE__*/_jsxDEV(NoData, {\n        className: \"no_data_img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table_div\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: tableHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 16\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table_div\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [tableHeader, tableBody]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this) // <table>\n  //        {tableHeader}\n  //        {tableBody}\n  //    </table> \n  ;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.isDataLoading ? dataLoading : tableInfo\n  }, void 0, false) // <>\n  //     {props.isDataLoading ? dataLoading : tableInfo}\n  // </>\n  // <div className = 'table_wrapper'>\n  //     {props.isDataLoading ? dataLoading : tableInfo}\n  // </div>\n  ;\n};\n\n_s(DataTable, \"JC1lb6zB/Tyn0emwRcr/aIGyY8w=\");\n\n_c = DataTable;\n\nconst mapStateToProps = state => ({\n  isDataLoading: state.LoaderReducer.isDataLoading\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(DataTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["/Users/kimseongjae/source/eyeDX/src/components/parts/table/table.js"],"names":["React","useEffect","useState","CustomLabel","CustomBoxLabel","connect","BlueLoader","ListLangModel","basal_disease","birthday","gender","inspection_place","order","program","status","waiting","DataTableModel","_id","interpretationDate","basalDisease","place","DataTable","props","initListLang","setInitListLang","initBodyList","setInitBodyList","isListNull","setIsListNull","stirngToObj","JSON","parse","localStorage","getItem","year","lang","updateListLang","list","updateBodyList","tableBodyList","size","undefined","Object","keys","length","tableHeader","tableBody","map","i","title","j","k","toUpperCase","dataLoading","tableInfo","isDataLoading","mapStateToProps","state","LoaderReducer","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CustomLabel, CustomBoxLabel } from '../label/label';\nimport { connect } from 'react-redux'\nimport { ReactComponent as NoData } from \"../../../images/no_data.svg\";\nimport { BlueLoader } from '../../../components/loader/loader';\nimport \"./table.css\";\n\nconst ListLangModel = {\n    basal_disease: \"BASAL DISEASE\",\n    birthday: \"BIRTH DATE\",\n    gender: \"GENDER\",\n    inspection_place: \"INSPECTION PLACE\",\n    order: \"ORDER\",\n    program: \"PROGRAM\",\n    status: \"STATUS\",\n    waiting: \"WAITING\"\n}\n\nconst DataTableModel = [\n    {\n        _id: \"\",\n        interpretationDate: \"\",\n        program: [\"\"],\n        birthday: \"\",\n        gender: \"\",\n        basalDisease: [\"\"],\n        place: \"\",\n        status: \"\"\n    },\n]\n\nconst DataTable = (props) => {\n\n    const [initListLang, setInitListLang] = useState(ListLangModel);\n    const [initBodyList, setInitBodyList] = useState(DataTableModel);\n    const [isListNull, setIsListNull] = useState(false);\n    const stirngToObj = JSON.parse(localStorage.getItem(\"filter-value\"));\n    const year = localStorage.getItem(\"filter-value\") !== null ? stirngToObj.lang === \"kr\" ? \"년\" : \"year\" : localStorage.getItem(\"lang\") === \"kr\" ? \"년\" : \"year\";\n    const updateListLang = props.list;\n    const updateBodyList = props.tableBodyList;\n    const size = props.size;\n\n    useEffect(() => {\n        if (updateListLang !== undefined && Object.keys(updateListLang).length !== 0) {\n            setInitListLang(updateListLang);\n        }\n\n        if (updateBodyList === null) {\n            setIsListNull(true);\n        } else {\n            if (updateBodyList !== undefined && updateBodyList.length !== 0) {\n                setInitBodyList(updateBodyList);\n                setIsListNull(false);\n            }\n        }\n    }, [updateListLang, updateBodyList])\n\n    const tableHeader = (\n        <thead>\n            <tr>\n                <th>{initListLang.order}</th>\n                <th>{initListLang.program}</th>\n                <th>{initListLang.birthday}</th>\n                <th>{initListLang.gender}</th>\n                <th>{initListLang.basal_disease}</th>\n                <th>{initListLang.inspection_place}</th>\n                <th>{initListLang.status}</th>\n            </tr>\n        </thead>\n    )\n\n    const tableBody = (\n        <tbody className='tbody_value'>\n            {initBodyList.map((list, i) => (\n                <tr key={list._id} className='table_body_list_tr'>\n                    <td>{list.interpretationDate}</td>\n                    <td>\n                        <div className={\"table_program_td_div_\" + size}>{list.program.map((title, j) => (\n                            <CustomLabel key={j} title={title} size={size} />))}</div></td>\n                    <td>{list.birthday}</td>\n                    <td>{list.gender}</td>\n                    <td>\n                        {list.basalDisease.length === 0 ? \"-\" : list.basalDisease.map((title, k) => (\n                            <span key={k}>{title + year}{list.basalDisease.length - 1 === k ? \"\" : \" / \"}</span>\n                        ))}</td>\n                    <td>{list.place}</td>\n                    <td>\n                        <div className={\"table_status_td_div\"}>\n                            <CustomBoxLabel title={list.status.toUpperCase()} backgroundColor={list.status.toUpperCase() === \"HOLD\" ? \"#FFE4E4\" : \"#E4F3FF\"} color={list.status.toUpperCase() === \"HOLD\" ? \"#E50000\" : \"#0069BB\"} />\n                        </div>\n                    </td>\n                </tr>\n            ))}\n        </tbody>\n    )\n\n    const dataLoading = (\n        <div className='loading_wrapper'>\n            <div className=\"loading_blue_div\">\n                <div className=\"loading_content_blue_div\">\n                    <BlueLoader />\n                    <span>loading...</span>\n                </div>\n            </div>\n        </div>\n\n    )\n\n    const tableInfo = (\n        true ? <div className='table_wrapper'>\n            <div className=\"no_data_div\">\n                <NoData className=\"no_data_img\" />\n            </div>\n            <div className='table_div'>\n                <table>\n                    {tableHeader}\n                </table>\n            </div>\n        </div> :\n        <div className='table_wrapper'>\n           <div className='table_div'>\n                <table>\n                    {tableHeader}\n                    {tableBody}\n                </table>\n            </div> \n        </div>\n            \n        // <table>\n        //        {tableHeader}\n        //        {tableBody}\n        //    </table> \n    )\n\n    return (\n        <>\n            {/* {dataLoading} */}\n\n            {props.isDataLoading ? dataLoading : tableInfo}\n        </>\n        // <>\n        //     {props.isDataLoading ? dataLoading : tableInfo}\n        // </>\n        // <div className = 'table_wrapper'>\n        //     {props.isDataLoading ? dataLoading : tableInfo}\n        // </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    isDataLoading: state.LoaderReducer.isDataLoading,\n})\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataTable)\n"]},"metadata":{},"sourceType":"module"}